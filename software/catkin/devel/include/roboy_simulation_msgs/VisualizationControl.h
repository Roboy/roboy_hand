// Generated by gencpp from file roboy_simulation_msgs/VisualizationControl.msg
// DO NOT EDIT!


#ifndef ROBOY_SIMULATION_MSGS_MESSAGE_VISUALIZATIONCONTROL_H
#define ROBOY_SIMULATION_MSGS_MESSAGE_VISUALIZATIONCONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_simulation_msgs
{
template <class ContainerAllocator>
struct VisualizationControl_
{
  typedef VisualizationControl_<ContainerAllocator> Type;

  VisualizationControl_()
    : roboy_id(0)
    , control(0)
    , value(false)  {
    }
  VisualizationControl_(const ContainerAllocator& _alloc)
    : roboy_id(0)
    , control(0)
    , value(false)  {
  (void)_alloc;
    }



   typedef int32_t _roboy_id_type;
  _roboy_id_type roboy_id;

   typedef int32_t _control_type;
  _control_type control;

   typedef uint8_t _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::roboy_simulation_msgs::VisualizationControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_simulation_msgs::VisualizationControl_<ContainerAllocator> const> ConstPtr;

}; // struct VisualizationControl_

typedef ::roboy_simulation_msgs::VisualizationControl_<std::allocator<void> > VisualizationControl;

typedef boost::shared_ptr< ::roboy_simulation_msgs::VisualizationControl > VisualizationControlPtr;
typedef boost::shared_ptr< ::roboy_simulation_msgs::VisualizationControl const> VisualizationControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_simulation_msgs::VisualizationControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_simulation_msgs::VisualizationControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roboy_simulation_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'roboy_simulation_msgs': ['/home/sausy/Projects/Hand_openBionic/software/catkin/src/roboy_communication/roboy_simulation_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::VisualizationControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_simulation_msgs::VisualizationControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::VisualizationControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_simulation_msgs::VisualizationControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::VisualizationControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_simulation_msgs::VisualizationControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_simulation_msgs::VisualizationControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8f08b9af8c2344f7cdcbec5fccf19c8c";
  }

  static const char* value(const ::roboy_simulation_msgs::VisualizationControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8f08b9af8c2344f7ULL;
  static const uint64_t static_value2 = 0xcdcbec5fccf19c8cULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_simulation_msgs::VisualizationControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_simulation_msgs/VisualizationControl";
  }

  static const char* value(const ::roboy_simulation_msgs::VisualizationControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_simulation_msgs::VisualizationControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 roboy_id\n"
"int32 control\n"
"bool value\n"
;
  }

  static const char* value(const ::roboy_simulation_msgs::VisualizationControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_simulation_msgs::VisualizationControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.roboy_id);
      stream.next(m.control);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VisualizationControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_simulation_msgs::VisualizationControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_simulation_msgs::VisualizationControl_<ContainerAllocator>& v)
  {
    s << indent << "roboy_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.roboy_id);
    s << indent << "control: ";
    Printer<int32_t>::stream(s, indent + "  ", v.control);
    s << indent << "value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_SIMULATION_MSGS_MESSAGE_VISUALIZATIONCONTROL_H
