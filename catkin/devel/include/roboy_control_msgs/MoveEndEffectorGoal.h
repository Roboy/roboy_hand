// Generated by gencpp from file roboy_control_msgs/MoveEndEffectorGoal.msg
// DO NOT EDIT!


#ifndef ROBOY_CONTROL_MSGS_MESSAGE_MOVEENDEFFECTORGOAL_H
#define ROBOY_CONTROL_MSGS_MESSAGE_MOVEENDEFFECTORGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace roboy_control_msgs
{
template <class ContainerAllocator>
struct MoveEndEffectorGoal_
{
  typedef MoveEndEffectorGoal_<ContainerAllocator> Type;

  MoveEndEffectorGoal_()
    : endeffector()
    , type(0)
    , ik_type(0)
    , pose()
    , target_frame()
    , timeout(0)
    , tolerance(0.0)  {
    }
  MoveEndEffectorGoal_(const ContainerAllocator& _alloc)
    : endeffector(_alloc)
    , type(0)
    , ik_type(0)
    , pose(_alloc)
    , target_frame(_alloc)
    , timeout(0)
    , tolerance(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _endeffector_type;
  _endeffector_type endeffector;

   typedef int8_t _type_type;
  _type_type type;

   typedef int8_t _ik_type_type;
  _ik_type_type ik_type;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _target_frame_type;
  _target_frame_type target_frame;

   typedef int32_t _timeout_type;
  _timeout_type timeout;

   typedef float _tolerance_type;
  _tolerance_type tolerance;





  typedef boost::shared_ptr< ::roboy_control_msgs::MoveEndEffectorGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_control_msgs::MoveEndEffectorGoal_<ContainerAllocator> const> ConstPtr;

}; // struct MoveEndEffectorGoal_

typedef ::roboy_control_msgs::MoveEndEffectorGoal_<std::allocator<void> > MoveEndEffectorGoal;

typedef boost::shared_ptr< ::roboy_control_msgs::MoveEndEffectorGoal > MoveEndEffectorGoalPtr;
typedef boost::shared_ptr< ::roboy_control_msgs::MoveEndEffectorGoal const> MoveEndEffectorGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_control_msgs::MoveEndEffectorGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_control_msgs::MoveEndEffectorGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roboy_control_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'roboy_control_msgs': ['/home/sausy/Projects/roboy_hand/catkin/src/roboy_communication/roboy_control_msgs/msg', '/home/sausy/Projects/roboy_hand/catkin/devel/share/roboy_control_msgs/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roboy_control_msgs::MoveEndEffectorGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_control_msgs::MoveEndEffectorGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_control_msgs::MoveEndEffectorGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_control_msgs::MoveEndEffectorGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_control_msgs::MoveEndEffectorGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_control_msgs::MoveEndEffectorGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_control_msgs::MoveEndEffectorGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f33fbd8d95986b67598d14cdfccd5fac";
  }

  static const char* value(const ::roboy_control_msgs::MoveEndEffectorGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf33fbd8d95986b67ULL;
  static const uint64_t static_value2 = 0x598d14cdfccd5facULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_control_msgs::MoveEndEffectorGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_control_msgs/MoveEndEffectorGoal";
  }

  static const char* value(const ::roboy_control_msgs::MoveEndEffectorGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_control_msgs::MoveEndEffectorGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"string endeffector\n"
"# 0: pose in world frame 1: pose relative to target_frame\n"
"int8 type\n"
"# 0: position and orientation 1: position only 2: orientation only\n"
"int8 ik_type\n"
"geometry_msgs/Pose pose\n"
"string target_frame\n"
"int32 timeout\n"
"float32 tolerance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::roboy_control_msgs::MoveEndEffectorGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_control_msgs::MoveEndEffectorGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.endeffector);
      stream.next(m.type);
      stream.next(m.ik_type);
      stream.next(m.pose);
      stream.next(m.target_frame);
      stream.next(m.timeout);
      stream.next(m.tolerance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveEndEffectorGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_control_msgs::MoveEndEffectorGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_control_msgs::MoveEndEffectorGoal_<ContainerAllocator>& v)
  {
    s << indent << "endeffector: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.endeffector);
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
    s << indent << "ik_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ik_type);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "target_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.target_frame);
    s << indent << "timeout: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timeout);
    s << indent << "tolerance: ";
    Printer<float>::stream(s, indent + "  ", v.tolerance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_CONTROL_MSGS_MESSAGE_MOVEENDEFFECTORGOAL_H
