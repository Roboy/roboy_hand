// Generated by gencpp from file roboy_middleware_msgs/ControlModeRequest.msg
// DO NOT EDIT!


#ifndef ROBOY_MIDDLEWARE_MSGS_MESSAGE_CONTROLMODEREQUEST_H
#define ROBOY_MIDDLEWARE_MSGS_MESSAGE_CONTROLMODEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboy_middleware_msgs
{
template <class ContainerAllocator>
struct ControlModeRequest_
{
  typedef ControlModeRequest_<ContainerAllocator> Type;

  ControlModeRequest_()
    : legacy(false)
    , control_mode(0)
    , set_point(0)
    , motor_id()  {
    }
  ControlModeRequest_(const ContainerAllocator& _alloc)
    : legacy(false)
    , control_mode(0)
    , set_point(0)
    , motor_id(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _legacy_type;
  _legacy_type legacy;

   typedef int32_t _control_mode_type;
  _control_mode_type control_mode;

   typedef int32_t _set_point_type;
  _set_point_type set_point;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _motor_id_type;
  _motor_id_type motor_id;





  typedef boost::shared_ptr< ::roboy_middleware_msgs::ControlModeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboy_middleware_msgs::ControlModeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ControlModeRequest_

typedef ::roboy_middleware_msgs::ControlModeRequest_<std::allocator<void> > ControlModeRequest;

typedef boost::shared_ptr< ::roboy_middleware_msgs::ControlModeRequest > ControlModeRequestPtr;
typedef boost::shared_ptr< ::roboy_middleware_msgs::ControlModeRequest const> ControlModeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboy_middleware_msgs::ControlModeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboy_middleware_msgs::ControlModeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roboy_middleware_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'roboy_middleware_msgs': ['/home/sausy/Projects/Hand_openBionic/catkin/src/roboy_communication/roboy_middleware_msgs/msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::ControlModeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboy_middleware_msgs::ControlModeRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::ControlModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboy_middleware_msgs::ControlModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::ControlModeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboy_middleware_msgs::ControlModeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboy_middleware_msgs::ControlModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "38e567abcd822fa5d55362b35321b656";
  }

  static const char* value(const ::roboy_middleware_msgs::ControlModeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x38e567abcd822fa5ULL;
  static const uint64_t static_value2 = 0xd55362b35321b656ULL;
};

template<class ContainerAllocator>
struct DataType< ::roboy_middleware_msgs::ControlModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboy_middleware_msgs/ControlModeRequest";
  }

  static const char* value(const ::roboy_middleware_msgs::ControlModeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboy_middleware_msgs::ControlModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool legacy\n"
"int32 control_mode\n"
"int32 set_point\n"
"\n"
"uint16[] motor_id\n"
;
  }

  static const char* value(const ::roboy_middleware_msgs::ControlModeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboy_middleware_msgs::ControlModeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.legacy);
      stream.next(m.control_mode);
      stream.next(m.set_point);
      stream.next(m.motor_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlModeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboy_middleware_msgs::ControlModeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboy_middleware_msgs::ControlModeRequest_<ContainerAllocator>& v)
  {
    s << indent << "legacy: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.legacy);
    s << indent << "control_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.control_mode);
    s << indent << "set_point: ";
    Printer<int32_t>::stream(s, indent + "  ", v.set_point);
    s << indent << "motor_id[]" << std::endl;
    for (size_t i = 0; i < v.motor_id.size(); ++i)
    {
      s << indent << "  motor_id[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.motor_id[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOY_MIDDLEWARE_MSGS_MESSAGE_CONTROLMODEREQUEST_H
